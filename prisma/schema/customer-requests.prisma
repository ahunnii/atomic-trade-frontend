model Request {
  id            String            @id @default(cuid())
  storeId       String
  store         Store             @relation("StoreToRequest", fields: [storeId], references: [id], onDelete: Cascade)

  status        RequestStatus     @default(PENDING)

  notes         String?           @db.Text

  customerId    String?
  customer      Customer?         @relation(fields: [customerId], references: [id], onDelete: SetNull)

  name          String?
  email         String
  details       String            @db.Text
  images        String[]
  invoices      Invoice[]
  payments      RequestPayment[]
 

  items         RequestItem[]

  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  paidInFullAt  DateTime?
  archivedAt    DateTime?


  estimatedCompletionAt DateTime?

  @@index([storeId])
  @@index([customerId])

}

model RequestPayment {
  id            String          @id @default(cuid())
  requestId     String
  request       Request         @relation(fields: [requestId], references: [id], onDelete: Cascade)
  type          InvoiceType     @default(DEPOSIT)
  provider      PaymentProvider @default(STRIPE)
  status        PaymentStatus   @default(PENDING)
  amount        Int
  providerId    String?
  providerUrl   String?
  issuedAt      DateTime?
  dueAt         DateTime?
  expiresAt     DateTime?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  paidAt        DateTime?

  @@index([requestId])
}

model RequestItem {
  id            String      @id @default(cuid())
  requestId     String
  request       Request     @relation(fields: [requestId], references: [id], onDelete: Cascade)
  quantity      Int
  totalPrice    Int
  unitPrice     Int?
  name          String
  description   String?     @db.Text
  productId     String?
  product       Product?    @relation(fields: [productId], references: [id], onDelete: SetNull)
  orderItems    OrderItem[]

  @@index([requestId])
  @@index([productId])
}


enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
  COMPLETED
  CANCELLED
}


model ProductRequest {
  id            String     @id @default(cuid())

  email         String
  firstName     String
  lastName      String
  status        ProductRequestStatus @default(PENDING)

  customerId    String?
  customer      Customer?  @relation(fields: [customerId], references: [id], onDelete: SetNull)

  phone         String?
  details       String     @db.Text
  images        String[]
 
  orderId       String?
  order         Order?     @relation(fields: [orderId], references: [id], onDelete: SetNull)

  quotes        ProductQuote[]

  storeId       String
  store         Store             @relation(fields: [storeId], references: [id], onDelete: Cascade)

  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
}

model ProductQuote {
  id                      String      @id @default(cuid())
  productRequestId        String
  productRequest          ProductRequest     @relation(fields: [productRequestId], references: [id], onDelete: Cascade)

  amountInCents           Int
  status                  QuoteStatus     @default(PENDING)
  message                 String?         @db.Text

  createdAt               DateTime        @default(now())
  updatedAt               DateTime        @updatedAt
  expiresAt               DateTime?
}

enum QuoteStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum ProductRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}
