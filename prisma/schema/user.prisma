// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String           @id @default(cuid())
  name          String?
  email         String?          @unique
  emailVerified DateTime?
  providerId    String?          @unique
  provider      PaymentProvider?
  image         String?
  firstName     String?
  lastName      String?
  accounts      Account[]
  sessions      Session[]
  role          Role             @default(USER)
  // orders        Order[]          @relation("UserToOrder")
 
  reviews       Review[]
  addresses         Address[]
  customerProfiles  Customer[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  USER
  ADMIN
  BUSINESS_OWNER
}


model Customer {
  id          String    @id @default(cuid())

  firstName   String
  lastName    String


  email       String    @unique
  phone String?


  userId      String?
  storeId     String
  user        User?     @relation( fields: [userId], references: [id])
  store       Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)
  cart        Cart?

  defaultAddressId String?

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  addresses   Address[]
  requests    Request[]
  invoices    Invoice[]
  orders      Order[]
  payments    Payment[]
  discounts   Discount[]
  productRequests ProductRequest[]

  tags        String[]
  notes       String? @db.Text

  metadata    Json?

  @@index([userId])
}
